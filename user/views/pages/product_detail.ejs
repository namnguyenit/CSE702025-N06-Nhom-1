<%- include('../partials/header', { title: title }) %>

<style>
    .product-detail-modern {
        background: #fff;
        border-radius: 18px;
        box-shadow: 0 4px 32px rgba(37,109,255,0.08), 0 1.5px 8px rgba(0,0,0,0.06);
        padding: 36px 32px 32px 32px;
        margin-bottom: 32px;
    }
    .product-img-gallery {
        background: linear-gradient(135deg,#f7faff 60%,#eaf1ff 100%);
        border-radius: 18px;
        box-shadow: 0 2px 16px rgba(37,109,255,0.07);
        display: flex;
        align-items: center;
        justify-content: center;
        min-height: 340px;
        margin-bottom: 18px;
        transition: box-shadow 0.2s;
    }
    .product-img-gallery img {
        max-width: 90%;
        max-height: 320px;
        border-radius: 14px;
        box-shadow: 0 2px 8px rgba(37,109,255,0.10);
        transition: transform 0.3s;
    }
    .product-img-gallery:hover img {
        transform: scale(1.06) rotate(-1.5deg);
    }
    .single-product-details h3 {
        font-size: 2rem;
        font-weight: 700;
        margin-bottom: 10px;
        color: #222;
    }
    .single-product-details .badge-success {
        background: linear-gradient(90deg,#256DFF 0%,#00c48c 100%);
        color: #fff;
        font-size: 1rem;
        border-radius: 16px;
        padding: 6px 18px;
        font-weight: 600;
        margin-bottom: 8px;
    }
    .single-product-details p {
        color: #444;
        font-size: 1.08rem;
        margin-bottom: 18px;
    }
    .single-product-details label {
        font-weight: 500;
        color: #555;
    }
    .single-product-details .form-group {
        display: flex;
        align-items: center;
        margin-bottom: 14px;
    }
    .single-product-details .form-group label {
        min-width: 120px;
        margin-bottom: 0;
        margin-right: 12px;
        flex-shrink: 0;
        text-align: right;
    }
    .single-product-details .form-group select.form-control {
        flex: 1 1 0%;
        margin-bottom: 0;
        min-width: 0;
    }
    .product-price-modern {
        font-size: 2rem;
        color: #ff003c;
        font-weight: 700;
        margin-bottom: 8px;
    }
    .product-stock-modern {
        font-size: 1.1rem;
        color: #256DFF;
        font-weight: 600;
        margin-bottom: 12px;
    }
    .qty-group-modern {
        display: flex;
        align-items: center;
        gap: 0;
        border: 1.5px solid #eaeaea;
        border-radius: 12px;
        background: #fafbfc;
        width: 120px;
        height: 44px;
        margin-bottom: 18px;
    }
    .qty-btn-modern {
        width: 44px;
        height: 44px;
        border: none;
        background: #f4f6fa;
        color: #256DFF;
        font-size: 1.3rem;
        font-weight: 700;
        border-radius: 12px 0 0 12px;
        cursor: pointer;
        transition: background 0.2s;
    }
    .qty-btn-modern:last-child {
        border-radius: 0 12px 12px 0;
    }
    .qty-btn-modern:hover {
        background: #256DFF;
        color: #fff;
    }
    .qty-input-modern {
        width: 32px;
        border: none;
        text-align: center;
        font-size: 1.1rem;
        background: transparent;
        outline: none;
    }
    .cta-btn-modern {
        padding: 12px 32px;
        font-size: 1.15rem;
        font-weight: 700;
        border-radius: 24px;
        margin-right: 16px;
        background: linear-gradient(90deg,#256DFF 0%,#ff003c 100%);
        color: #fff;
        border: none;
        box-shadow: 0 2px 8px rgba(37,109,255,0.13);
        transition: background 0.2s, box-shadow 0.2s, transform 0.2s;
    }
    .cta-btn-modern:last-child {
        margin-right: 0;
        background: #fff;
        color: #256DFF;
        border: 2px solid #256DFF;
    }
    .cta-btn-modern:hover {
        background: #ff003c;
        color: #fff;
        transform: translateY(-2px) scale(1.04);
        box-shadow: 0 4px 16px rgba(255,0,60,0.10);
    }
    @media (max-width: 900px) {
        .product-detail-modern { padding: 18px 6px; }
        .product-img-gallery { min-height: 180px; }
        .single-product-details h3 { font-size: 1.3rem; }
        .product-price-modern { font-size: 1.2rem; }
    }
    @media (max-width: 600px) {
        .single-product-details .form-group {
            flex-direction: column;
            align-items: stretch;
        }
        .single-product-details .form-group label {
            text-align: left;
            margin-bottom: 6px;
            min-width: 0;
        }
    }
</style>

<div class="container product-detail-modern mt-4">
    <div class="row">
        <div class="col-lg-6 col-md-6">
            <div class="product-img-gallery mb-4">
                <img id="mainProductImg"
                    src="<%= product.image %>"
                    alt="<%= product.name %>"
                    class="img-fluid" />
            </div>
        </div>
        <div class="col-lg-6 col-md-6">
            <div class="single-product-details">
                <h3><%= product.name %></h3>
                <div class="mb-2">
                    <span class="badge badge-success">Còn hàng</span>
                </div>
                <p><%= product.description %></p>
                <form id="productOptionsForm" autocomplete="off">
                    <div class="form-group">
                        <label for="typeSelect">Loại sản phẩm:</label>
                        <select class="form-control" id="typeSelect" name="type">
                            <% product.types.forEach((type, idx) => { %>
                                <option value="<%= idx %>"><%= type.type %></option>
                            <% }) %>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="sizeSelect">Size:</label>
                        <select class="form-control" id="sizeSelect" name="size"></select>
                    </div>
                    <div class="form-group">
                        <label>Giá bán:</label>
                        <span id="productPrice" class="product-price-modern"></span>
                    </div>
                    <div class="form-group">
                        <label>Tồn kho:</label>
                        <span id="productStock" class="product-stock-modern"></span>
                    </div>
                    <div class="form-group d-flex align-items-center">
                        <label class="mr-2 mb-0">Số lượng:</label>
                        <div class="qty-group-modern">
                            <button type="button" class="qty-btn-modern" id="qtyDown">-</button>
                            <input type="number" class="qty-input-modern" id="qtyInput" name="qty" min="1" value="1">
                            <button type="button" class="qty-btn-modern" id="qtyUp">+</button>
                        </div>
                    </div>
                    <div class="d-flex">
                        <button type="button" class="cta-btn-modern" id="addToCartBtn">Thêm vào giỏ hàng</button>
                        <button type="button" class="cta-btn-modern" id="buyNowBtn">Mua ngay</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <div class="row mt-5">
        <div class="col-12">
            <ul class="nav nav-tabs" id="productTab" role="tablist">
                <li class="nav-item">
                    <a class="nav-link active" id="desc-tab" data-toggle="tab" href="#desc" role="tab">Mô tả</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" id="review-tab" data-toggle="tab" href="#review" role="tab">Đánh giá</a>
                </li>
            </ul>
            <div class="tab-content" id="productTabContent">
                <div class="tab-pane fade show active p-3" id="desc" role="tabpanel">
                    <%= product.description %>
                </div>
                <div class="tab-pane fade p-3" id="review" role="tabpanel">
                    <p>Chưa có đánh giá nào cho sản phẩm này.</p>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal Đăng nhập/Đăng ký -->
<div class="modal fade" id="authModal" tabindex="-1" role="dialog" aria-labelledby="authModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content" style="border-radius: 1rem;">
      <div class="modal-header" style="border-bottom: none;">
        <h5 class="modal-title w-100 text-center" id="authModalLabel" style="font-weight: bold;">Bạn cần đăng nhập hoặc đăng ký để tiếp tục</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close" style="outline: none;">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body text-center">
        <a href="/auth/login" class="btn btn-primary mb-2" style="width: 120px;">Đăng nhập</a>
        <a href="/auth/register" class="btn btn-outline-primary" style="width: 120px;">Đăng ký</a>
      </div>
    </div>
  </div>
</div>

<!-- SweetAlert2 -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.10.7/dist/sweetalert2.min.js"></script>
<script>
    // Dữ liệu các loại sản phẩm và size
    const productTypes = JSON.parse('<%- JSON.stringify(product.types) %>');
    const placeholderImg = '/img/product-placeholder.png';

    function getTypeImage(typeObj) {
        if (typeObj && typeObj.image && typeObj.image.imageData && typeObj.image.imageType) {
            if (typeObj.image.imageData.$binary && typeObj.image.imageData.$binary.base64) {
                return `data:${typeObj.image.imageType};base64,${typeObj.image.imageData.$binary.base64}`;
            } else if (typeof typeObj.image.imageData === 'string') {
                return `data:${typeObj.image.imageType};base64,${typeObj.image.imageData}`;
            }
        }
        return placeholderImg;
    }

    function updateSizeAndPrice() {
        const typeIdx = parseInt(document.getElementById('typeSelect').value, 10);
        const sizeSelect = document.getElementById('sizeSelect');
        sizeSelect.innerHTML = '';
        const details = productTypes[typeIdx]?.detail || [];
        console.log('DEBUG updateSizeAndPrice:', { productTypes, typeIdx, typeObj: productTypes[typeIdx], details });
        details.forEach((d, idx) => {
            const opt = document.createElement('option');
            opt.value = idx;
            opt.text = d.size;
            sizeSelect.appendChild(opt);
        });
        // Always select the first size if available
        if (details.length > 0) {
            sizeSelect.selectedIndex = 0;
            // Trigger change event so price/stock update for new size
            sizeSelect.dispatchEvent(new Event('change'));
        }
        // If using Nice Select, update it
        if (window.jQuery && typeof $(sizeSelect).niceSelect === 'function') {
            $(sizeSelect).niceSelect('update');
            bindSizeSelectEvents();
        }
        if (window.jQuery && typeof $('#typeSelect').niceSelect === 'function') {
            $('#typeSelect').niceSelect('update');
            bindTypeSelectEvents(); // Đảm bảo không bị lặp handler
        }
        // Update image
        const imgEl = document.getElementById('mainProductImg');
        const typeObj = productTypes[typeIdx];
        imgEl.src = getTypeImage(typeObj);
    }

    function updatePrice() {
        const typeIdx = parseInt(document.getElementById('typeSelect').value, 10);
        const sizeIdx = parseInt(document.getElementById('sizeSelect').value, 10);
        const details = productTypes[typeIdx]?.detail || [];
        const detail = details[sizeIdx] || details[0] || { price: 0, stock: 0 };
        const price = typeof detail.price === 'number' ? detail.price : parseInt(detail.price) || 0;
        document.getElementById('productPrice').innerText = price.toLocaleString('vi-VN') + '₫';
        document.getElementById('productStock').innerText = detail.stock;
    }
    function bindTypeSelectEvents() {
        // Remove old event handlers to prevent duplicate binding
        const typeSelect = document.getElementById('typeSelect');
        typeSelect.onchange = null;
        typeSelect.removeEventListener('change', updateSizeAndPrice);
        typeSelect.addEventListener('change', updateSizeAndPrice);
        // Nice Select: robustly sync native select and UI
        if (window.jQuery && typeof $('#typeSelect').niceSelect === 'function') {
            // Remove previous custom event namespace
            $('#typeSelect').off('.productTypeSync');
            // Listen for native select change (for keyboard, programmatic, etc)
            $('#typeSelect').on('change.productTypeSync', function() {
                updateSizeAndPrice();
            });
            // Listen for Nice Select option click
            const $nice = $('#typeSelect').next('.nice-select');
            if ($nice.length) {
                $nice.off('click.productTypeSync');
                $nice.on('click.productTypeSync', '.option', function(e) {
                    // Get the value of the clicked option (always string)
                    var value = $(this).attr('data-value');
                    if (typeof value === 'undefined') {
                        // fallback: get index and map to value
                        var idx = $(this).index();
                        value = $('#typeSelect option').eq(idx).val();
                    }
                    var $select = $('#typeSelect');
                    if ($select.val() !== value) {
                        $select.val(value).trigger('change');
                    }
                });
            }
        }
    }
    function bindSizeSelectEvents() {
        const sizeSelect = document.getElementById('sizeSelect');
        sizeSelect.onchange = null;
        sizeSelect.removeEventListener('change', updatePrice);
        sizeSelect.addEventListener('change', updatePrice);
        if (window.jQuery && typeof $(sizeSelect).niceSelect === 'function') {
            $(sizeSelect).off('.productSizeSync');
            $(sizeSelect).on('change.productSizeSync', function() {
                updatePrice();
            });
            const $nice = $(sizeSelect).next('.nice-select');
            if ($nice.length) {
                $nice.off('click.productSizeSync');
                $nice.on('click.productSizeSync', '.option', function(e) {
                    var value = $(this).attr('data-value');
                    if (typeof value === 'undefined') {
                        var idx = $(this).index();
                        value = $(sizeSelect).find('option').eq(idx).val();
                    }
                    if ($(sizeSelect).val() !== value) {
                        $(sizeSelect).val(value).trigger('change');
                    }
                });
            }
        }
    }
    // Thay thế addEventListener cũ bằng hàm mới
    bindTypeSelectEvents();
    // On page load, update Nice Select và bind lại sự kiện (chỉ 1 lần)
    document.addEventListener('DOMContentLoaded', function() {
        if (window.jQuery && typeof $('#typeSelect').niceSelect === 'function') {
            $('#typeSelect').niceSelect('update');
        }
        bindTypeSelectEvents();
        bindSizeSelectEvents();
    });

    // Kiểm tra trạng thái đăng nhập phía client
    const isLoggedIn = "<%= currentUser ? 'true' : 'false' %>";

    function showAuthModal() {
        $('#authModal').modal('show');
    }

    document.getElementById('buyNowBtn').addEventListener('click', async function() {
        if (!isLoggedIn) {
            showAuthModal();
            return;
        }
        const typeIdx = document.getElementById('typeSelect').value;
        const sizeIdx = document.getElementById('sizeSelect').value;
        const qty = parseInt(document.getElementById('qtyInput').value) || 1;
        const type = productTypes[typeIdx]?.type || '';
        const detail = (productTypes[typeIdx]?.detail || [])[sizeIdx] || {};
        const price = parseInt(detail.price) || 0;
        const size = detail.size || '';
        const typeObj = productTypes[typeIdx];
        const image = getTypeImage(typeObj);
        const productId = productTypes[typeIdx]?._id || '<%= product._id %>';
        // Chuyển hướng sang trang checkout với thông tin sản phẩm
        const params = new URLSearchParams({
            buyNow: 1,
            productId,
            name: '<%= product.name %>',
            type,
            size,
            price,
            qty
        });
        window.location.href = '/cart/checkout?' + params.toString();
    });

    document.getElementById('addToCartBtn').addEventListener('click', async function() {
        if (!isLoggedIn) {
            showAuthModal();
            return;
        }
        const typeIdx = document.getElementById('typeSelect').value;
        const sizeIdx = document.getElementById('sizeSelect').value;
        const qty = parseInt(document.getElementById('qtyInput').value) || 1;
        const typeObj = productTypes[typeIdx];
        const image = getTypeImage(typeObj);
        const productID = productTypes[typeIdx]?._id || '<%= product._id %>';
        try {
            const res = await fetch('/cart/add', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    productID,
                    orderNumber: qty,
                    type: productTypes[typeIdx]?.type || '',
                    size: (productTypes[typeIdx]?.detail || [])[sizeIdx]?.size || '',
                    image
                })
            });
            const data = await res.json();
            if (data.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Sản phẩm đã được thêm vào giỏ hàng!',
                    showConfirmButton: true,
                    confirmButtonText: 'OK',
                    allowOutsideClick: false
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Thêm vào giỏ hàng thất bại!',
                    text: data.message || '',
                    showConfirmButton: true
                });
            }
        } catch (err) {
            Swal.fire({
                icon: 'error',
                title: 'Lỗi kết nối!',
                text: 'Không thể thêm vào giỏ hàng. Vui lòng thử lại.',
                showConfirmButton: true
            });
        }
    });

    // Khởi tạo ban đầu
    updateSizeAndPrice();
    // Đảm bảo Nice Select đã update và event đã bind trước khi trigger change
    if (window.jQuery && typeof $('#typeSelect').niceSelect === 'function') {
        $('#typeSelect').niceSelect('update');
    }
    bindTypeSelectEvents();
    bindSizeSelectEvents();
    // Chọn type đầu tiên và trigger update (nếu chưa được chọn)
    const typeSelect = document.getElementById('typeSelect');
    if (typeSelect.options.length > 0) {
        typeSelect.selectedIndex = 0;
        typeSelect.dispatchEvent(new Event('change'));
    }
    // Chọn size đầu tiên và trigger update (nếu chưa được chọn)
    const sizeSelect = document.getElementById('sizeSelect');
    if (sizeSelect.options.length > 0) {
        sizeSelect.selectedIndex = 0;
        sizeSelect.dispatchEvent(new Event('change'));
    }

    // Duy trì số lượng sản phẩm trong giỏ hàng
    const qtyInput = document.getElementById('qtyInput');
    let initialQty = parseInt(qtyInput.value) || 1;
    qtyInput.addEventListener('change', function() {
        let val = parseInt(this.value);
        if (isNaN(val) || val < 1) {
            this.value = initialQty;
        } else {
            initialQty = val;
        }
    });
    // Thay thế input số lượng bằng nút + - hiện đại
    document.getElementById('qtyDown').onclick = function() {
        const input = document.getElementById('qtyInput');
        let val = parseInt(input.value) || 1;
        if (val > 1) input.value = val - 1;
    };
    document.getElementById('qtyUp').onclick = function() {
        const input = document.getElementById('qtyInput');
        let val = parseInt(input.value) || 1;
        input.value = val + 1;
    };
</script>
<%- include('../partials/footer') %>