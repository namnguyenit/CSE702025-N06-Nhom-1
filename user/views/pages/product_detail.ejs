<%- include('../partials/header', { title: title }) %>

<div class="slider-area ">
    <div class="single-slider slider-height2 d-flex align-items-center" data-background="/img/hero/about_hero.jpg">
        <div class="container">
            <div class="row">
                <div class="col-xl-12">
                    <div class="hero-cap text-center">
                        <h2><%= product.name %></h2>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<section class="product_description_area">
    <div class="container">
        <div class="row">
            <div class="col-lg-6 col-md-6">
                <!-- Ảnh sản phẩm -->
                <div class="product-img-gallery mb-4">
                    <img id="mainProductImg"
                        src="<%= product.image %>"
                        alt="<%= product.name %>"
                        class="img-fluid"
                        style="max-width: 100%; max-height: 350px; object-fit: contain;">
                </div>
            </div>
            <div class="col-lg-6 col-md-6">
                <div class="single-product-details">
                    <h3><%= product.name %></h3>
                    <div class="mb-2">
                        <span class="badge badge-success">Còn hàng</span>
                    </div>
                    <p><%= product.description %></p>
                    <form id="productOptionsForm">
                        <div class="form-group">
                            <label for="typeSelect">Loại sản phẩm:</label>
                            <select class="form-control" id="typeSelect" name="type">
                                <% product.types.forEach((type, idx) => { %>
                                    <option value="<%= idx %>"><%= type.type %></option>
                                <% }) %>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="sizeSelect">Size:</label>
                            <select class="form-control" id="sizeSelect" name="size">
                                <!-- Option sẽ được fill bằng JS -->
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Giá bán:</label>
                            <span id="productPrice" class="font-weight-bold text-danger" style="font-size: 1.3rem;"></span>
                        </div>
                        <div class="form-group">
                            <label>Tồn kho:</label>
                            <span id="productStock" class="font-weight-bold"></span>
                        </div>
                        <div class="form-group d-flex align-items-center">
                            <label class="mr-2 mb-0">Số lượng:</label>
                            <input type="number" class="form-control w-25" id="qtyInput" name="qty" min="1" value="1">
                        </div>
                        <div class="d-flex">
                            <button type="button" class="btn btn-outline-primary mt-2 mr-2" id="addToCartBtn">Thêm vào giỏ hàng</button>
                            <button type="button" class="btn btn-primary mt-2" id="buyNowBtn">Mua ngay</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
        <!-- Tab mô tả, đánh giá, ... giữ nguyên template -->
        <div class="row mt-5">
            <div class="col-12">
                <ul class="nav nav-tabs" id="productTab" role="tablist">
                    <li class="nav-item">
                        <a class="nav-link active" id="desc-tab" data-toggle="tab" href="#desc" role="tab">Mô tả</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" id="review-tab" data-toggle="tab" href="#review" role="tab">Đánh giá</a>
                    </li>
                </ul>
                <div class="tab-content" id="productTabContent">
                    <div class="tab-pane fade show active p-3" id="desc" role="tabpanel">
                        <%= product.description %>
                    </div>
                    <div class="tab-pane fade p-3" id="review" role="tabpanel">
                        <!-- Đánh giá sản phẩm (có thể bổ sung sau) -->
                        <p>Chưa có đánh giá nào cho sản phẩm này.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Modal Đăng nhập/Đăng ký -->
<div class="modal fade" id="authModal" tabindex="-1" role="dialog" aria-labelledby="authModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content" style="border-radius: 1rem;">
      <div class="modal-header" style="border-bottom: none;">
        <h5 class="modal-title w-100 text-center" id="authModalLabel" style="font-weight: bold;">Bạn cần đăng nhập hoặc đăng ký để tiếp tục</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close" style="outline: none;">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body text-center">
        <a href="/auth/login" class="btn btn-primary mb-2" style="width: 120px;">Đăng nhập</a>
        <a href="/auth/register" class="btn btn-outline-primary" style="width: 120px;">Đăng ký</a>
      </div>
    </div>
  </div>
</div>

<!-- Sử dụng SweetAlert2 từ CDN để đảm bảo luôn hoạt động -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.10.7/dist/sweetalert2.min.js"></script>
<script>
    // Dữ liệu các loại sản phẩm và size
    const productTypes = JSON.parse('<%- JSON.stringify(product.types) %>');
    const placeholderImg = '/img/product-placeholder.png';

    function getTypeImage(typeObj) {
        if (typeObj && typeObj.image && typeObj.image.imageData && typeObj.image.imageType) {
            if (typeObj.image.imageData.$binary && typeObj.image.imageData.$binary.base64) {
                return `data:${typeObj.image.imageType};base64,${typeObj.image.imageData.$binary.base64}`;
            } else if (typeof typeObj.image.imageData === 'string') {
                return `data:${typeObj.image.imageType};base64,${typeObj.image.imageData}`;
            }
        }
        return placeholderImg;
    }

    function updateSizeAndPrice() {
        const typeIdx = parseInt(document.getElementById('typeSelect').value, 10);
        const sizeSelect = document.getElementById('sizeSelect');
        sizeSelect.innerHTML = '';
        const details = productTypes[typeIdx]?.detail || [];
        console.log('DEBUG updateSizeAndPrice:', { productTypes, typeIdx, typeObj: productTypes[typeIdx], details });
        details.forEach((d, idx) => {
            const opt = document.createElement('option');
            opt.value = idx;
            opt.text = d.size;
            sizeSelect.appendChild(opt);
        });
        // Always select the first size if available
        if (details.length > 0) {
            sizeSelect.selectedIndex = 0;
            // Trigger change event so price/stock update for new size
            sizeSelect.dispatchEvent(new Event('change'));
        }
        // If using Nice Select, update it
        if (window.jQuery && typeof $(sizeSelect).niceSelect === 'function') {
            $(sizeSelect).niceSelect('update');
            bindSizeSelectEvents();
        }
        if (window.jQuery && typeof $('#typeSelect').niceSelect === 'function') {
            $('#typeSelect').niceSelect('update');
            bindTypeSelectEvents(); // Đảm bảo không bị lặp handler
        }
        // Update image
        const imgEl = document.getElementById('mainProductImg');
        const typeObj = productTypes[typeIdx];
        imgEl.src = getTypeImage(typeObj);
    }

    function updatePrice() {
        const typeIdx = parseInt(document.getElementById('typeSelect').value, 10);
        const sizeIdx = parseInt(document.getElementById('sizeSelect').value, 10);
        const details = productTypes[typeIdx]?.detail || [];
        const detail = details[sizeIdx] || details[0] || { price: 0, stock: 0 };
        console.log('DEBUG updatePrice:', { typeIdx, sizeIdx, details, detail });
        document.getElementById('productPrice').innerText = detail.price + '₫';
        document.getElementById('productStock').innerText = detail.stock;
    }
    function bindTypeSelectEvents() {
        // Remove old event handlers to prevent duplicate binding
        const typeSelect = document.getElementById('typeSelect');
        typeSelect.onchange = null;
        typeSelect.removeEventListener('change', updateSizeAndPrice);
        typeSelect.addEventListener('change', updateSizeAndPrice);
        // Nice Select: robustly sync native select and UI
        if (window.jQuery && typeof $('#typeSelect').niceSelect === 'function') {
            // Remove previous custom event namespace
            $('#typeSelect').off('.productTypeSync');
            // Listen for native select change (for keyboard, programmatic, etc)
            $('#typeSelect').on('change.productTypeSync', function() {
                updateSizeAndPrice();
            });
            // Listen for Nice Select option click
            const $nice = $('#typeSelect').next('.nice-select');
            if ($nice.length) {
                $nice.off('click.productTypeSync');
                $nice.on('click.productTypeSync', '.option', function(e) {
                    // Get the value of the clicked option (always string)
                    var value = $(this).attr('data-value');
                    if (typeof value === 'undefined') {
                        // fallback: get index and map to value
                        var idx = $(this).index();
                        value = $('#typeSelect option').eq(idx).val();
                    }
                    var $select = $('#typeSelect');
                    if ($select.val() !== value) {
                        $select.val(value).trigger('change');
                    }
                });
            }
        }
    }
    function bindSizeSelectEvents() {
        const sizeSelect = document.getElementById('sizeSelect');
        sizeSelect.onchange = null;
        sizeSelect.removeEventListener('change', updatePrice);
        sizeSelect.addEventListener('change', updatePrice);
        if (window.jQuery && typeof $(sizeSelect).niceSelect === 'function') {
            $(sizeSelect).off('.productSizeSync');
            $(sizeSelect).on('change.productSizeSync', function() {
                updatePrice();
            });
            const $nice = $(sizeSelect).next('.nice-select');
            if ($nice.length) {
                $nice.off('click.productSizeSync');
                $nice.on('click.productSizeSync', '.option', function(e) {
                    var value = $(this).attr('data-value');
                    if (typeof value === 'undefined') {
                        var idx = $(this).index();
                        value = $(sizeSelect).find('option').eq(idx).val();
                    }
                    if ($(sizeSelect).val() !== value) {
                        $(sizeSelect).val(value).trigger('change');
                    }
                });
            }
        }
    }
    // Thay thế addEventListener cũ bằng hàm mới
    bindTypeSelectEvents();
    // On page load, update Nice Select và bind lại sự kiện (chỉ 1 lần)
    document.addEventListener('DOMContentLoaded', function() {
        if (window.jQuery && typeof $('#typeSelect').niceSelect === 'function') {
            $('#typeSelect').niceSelect('update');
        }
        bindTypeSelectEvents();
        bindSizeSelectEvents();
    });

    // Kiểm tra trạng thái đăng nhập phía client
    const isLoggedIn = "<%= currentUser ? 'true' : 'false' %>";

    function showAuthModal() {
        $('#authModal').modal('show');
    }

    document.getElementById('buyNowBtn').addEventListener('click', async function() {
        if (!isLoggedIn) {
            showAuthModal();
            return;
        }
        const typeIdx = document.getElementById('typeSelect').value;
        const sizeIdx = document.getElementById('sizeSelect').value;
        const qty = parseInt(document.getElementById('qtyInput').value) || 1;
        const type = productTypes[typeIdx]?.type || '';
        const detail = (productTypes[typeIdx]?.detail || [])[sizeIdx] || {};
        const price = parseInt(detail.price) || 0;
        const size = detail.size || '';
        // Lấy đúng ảnh của type đang chọn
        const typeObj = productTypes[typeIdx];
        const image = getTypeImage(typeObj);
        // Địa chỉ giao hàng mẫu, thực tế nên lấy từ user nhập
        const shippingAddress = {
            fullName: 'Khách lẻ',
            phone: '0123456789',
            address: 'Địa chỉ mẫu',
            city: 'Hà Nội'
        };
        const res = await fetch('/order/quick-order', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                name: '<%= product.name %>',
                type,
                size,
                price,
                quantity: qty,
                image,
                shippingAddress
            })
        });
        const data = await res.json();
        if (data.success) {
            Swal.fire({
                icon: 'success',
                title: 'Đặt hàng thành công!',
                text: '',
                showConfirmButton: true
            }).then(() => {
                window.location.href = '/order/checkout?orderId=' + data.orderId;
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Đặt hàng thất bại!',
                text: data.message || '',
                showConfirmButton: true
            });
        }
    });

    document.getElementById('addToCartBtn').addEventListener('click', async function() {
        if (!isLoggedIn) {
            showAuthModal();
            return;
        }
        const typeIdx = document.getElementById('typeSelect').value;
        const sizeIdx = document.getElementById('sizeSelect').value;
        const qty = parseInt(document.getElementById('qtyInput').value) || 1;
        const typeObj = productTypes[typeIdx];
        const image = getTypeImage(typeObj);
        const productID = '<%= product._id %>';
        try {
            const res = await fetch('/cart/add', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    productID,
                    orderNumber: qty,
                    image
                })
            });
            const data = await res.json();
            if (data.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Sản phẩm đã được thêm vào giỏ hàng!',
                    showConfirmButton: true,
                    confirmButtonText: 'OK',
                    allowOutsideClick: false
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Thêm vào giỏ hàng thất bại!',
                    text: data.message || '',
                    showConfirmButton: true
                });
            }
        } catch (err) {
            Swal.fire({
                icon: 'error',
                title: 'Lỗi kết nối!',
                text: 'Không thể thêm vào giỏ hàng. Vui lòng thử lại.',
                showConfirmButton: true
            });
        }
    });

    // Khởi tạo ban đầu
    updateSizeAndPrice();
    // Đảm bảo Nice Select đã update và event đã bind trước khi trigger change
    if (window.jQuery && typeof $('#typeSelect').niceSelect === 'function') {
        $('#typeSelect').niceSelect('update');
    }
    bindTypeSelectEvents();
    bindSizeSelectEvents();
    // Chọn type đầu tiên và trigger update (nếu chưa được chọn)
    const typeSelect = document.getElementById('typeSelect');
    if (typeSelect.options.length > 0) {
        typeSelect.selectedIndex = 0;
        typeSelect.dispatchEvent(new Event('change'));
    }
    // Chọn size đầu tiên và trigger update (nếu chưa được chọn)
    const sizeSelect = document.getElementById('sizeSelect');
    if (sizeSelect.options.length > 0) {
        sizeSelect.selectedIndex = 0;
        sizeSelect.dispatchEvent(new Event('change'));
    }
</script>
<%- include('../partials/footer') %>